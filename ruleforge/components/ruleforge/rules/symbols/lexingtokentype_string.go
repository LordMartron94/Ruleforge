// Code generated by "stringer -type=LexingTokenType"; DO NOT EDIT.

package symbols

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IgnoreToken-0]
	_ = x[NewLineToken-1]
	_ = x[WhitespaceToken-2]
	_ = x[NumberToken-3]
	_ = x[LetterToken-4]
	_ = x[IdentifierKeyToken-5]
	_ = x[IdentifierValueToken-6]
	_ = x[VariableReferenceToken-7]
	_ = x[OpenCurlyBracketToken-8]
	_ = x[CloseCurlyBracketToken-9]
	_ = x[OpenSquareBracketToken-10]
	_ = x[CloseSquareBracketToken-11]
	_ = x[AssignmentOperatorToken-12]
	_ = x[ChainOperatorToken-13]
	_ = x[GreaterThanOrEqualOperatorToken-14]
	_ = x[LessThanOrEqualOperatorToken-15]
	_ = x[GreaterThanOperatorToken-16]
	_ = x[LessThanOperatorToken-17]
	_ = x[ExactMatchOperatorToken-18]
	_ = x[StyleCombineToken-19]
	_ = x[RuleStrictnessIndicatorToken-20]
	_ = x[NotEqualToOperatorToken-21]
	_ = x[MetadataKeywordToken-22]
	_ = x[NameKeywordToken-23]
	_ = x[VersionKeywordToken-24]
	_ = x[StrictnessKeywordToken-25]
	_ = x[AllKeywordToken-26]
	_ = x[SoftKeywordToken-27]
	_ = x[SemiStrictKeywordToken-28]
	_ = x[StrictKeywordToken-29]
	_ = x[SuperStrictKeywordToken-30]
	_ = x[VariableKeywordToken-31]
	_ = x[SectionConditionsKeywordToken-32]
	_ = x[ConditionAssignmentKeywordToken-33]
	_ = x[ConditionKeywordToken-34]
	_ = x[SectionKeywordToken-35]
	_ = x[DescriptionAssignmentKeywordToken-36]
	_ = x[RuleKeywordToken-37]
	_ = x[BuildKeywordToken-38]
	_ = x[ImportKeywordToken-39]
	_ = x[MeleeSpellHybridBuildToken-40]
	_ = x[MeleeDexHybridBuildToken-41]
	_ = x[SpellDexHybridBuildToken-42]
	_ = x[MeleeBuildToken-43]
	_ = x[SpellBuildToken-44]
	_ = x[DexBuildToken-45]
	_ = x[DotToken-46]
	_ = x[FunctionKeywordToken-47]
	_ = x[StyleOverrideToken-48]
}

const _LexingTokenType_name = "IgnoreTokenNewLineTokenWhitespaceTokenNumberTokenLetterTokenIdentifierKeyTokenIdentifierValueTokenVariableReferenceTokenOpenCurlyBracketTokenCloseCurlyBracketTokenOpenSquareBracketTokenCloseSquareBracketTokenAssignmentOperatorTokenChainOperatorTokenGreaterThanOrEqualOperatorTokenLessThanOrEqualOperatorTokenGreaterThanOperatorTokenLessThanOperatorTokenExactMatchOperatorTokenStyleCombineTokenRuleStrictnessIndicatorTokenNotEqualToOperatorTokenMetadataKeywordTokenNameKeywordTokenVersionKeywordTokenStrictnessKeywordTokenAllKeywordTokenSoftKeywordTokenSemiStrictKeywordTokenStrictKeywordTokenSuperStrictKeywordTokenVariableKeywordTokenSectionConditionsKeywordTokenConditionAssignmentKeywordTokenConditionKeywordTokenSectionKeywordTokenDescriptionAssignmentKeywordTokenRuleKeywordTokenBuildKeywordTokenImportKeywordTokenMeleeSpellHybridBuildTokenMeleeDexHybridBuildTokenSpellDexHybridBuildTokenMeleeBuildTokenSpellBuildTokenDexBuildTokenDotTokenFunctionKeywordTokenStyleOverrideToken"

var _LexingTokenType_index = [...]uint16{0, 11, 23, 38, 49, 60, 78, 98, 120, 141, 163, 185, 208, 231, 249, 280, 308, 332, 353, 376, 393, 421, 444, 464, 480, 499, 521, 536, 552, 574, 592, 615, 635, 664, 695, 716, 735, 768, 784, 801, 819, 845, 869, 893, 908, 923, 936, 944, 964, 982}

func (i LexingTokenType) String() string {
	if i < 0 || i >= LexingTokenType(len(_LexingTokenType_index)-1) {
		return "LexingTokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LexingTokenType_name[_LexingTokenType_index[i]:_LexingTokenType_index[i+1]]
}
