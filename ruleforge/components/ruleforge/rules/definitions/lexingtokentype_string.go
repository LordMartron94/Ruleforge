// Code generated by "stringer -type=LexingTokenType"; DO NOT EDIT.

package definitions

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IgnoreToken-0]
	_ = x[NewLineToken-1]
	_ = x[WhitespaceToken-2]
	_ = x[DigitToken-3]
	_ = x[LetterToken-4]
	_ = x[IdentifierToken-5]
	_ = x[CurlyBracketToken-6]
	_ = x[AssignmentOperatorToken-7]
	_ = x[MetadataKeywordToken-8]
	_ = x[NameKeywordToken-9]
	_ = x[VersionKeywordToken-10]
	_ = x[StrictnessKeywordToken-11]
	_ = x[AllKeywordToken-12]
	_ = x[SoftKeywordToken-13]
	_ = x[SemiStrictKeywordToken-14]
	_ = x[StrictKeywordToken-15]
	_ = x[SuperStrictKeywordToken-16]
	_ = x[DotToken-17]
}

const _LexingTokenType_name = "IgnoreTokenNewLineTokenWhitespaceTokenDigitTokenLetterTokenIdentifierTokenCurlyBracketTokenAssignmentOperatorTokenMetadataKeywordTokenNameKeywordTokenVersionKeywordTokenStrictnessKeywordTokenAllKeywordTokenSoftKeywordTokenSemiStrictKeywordTokenStrictKeywordTokenSuperStrictKeywordTokenDotToken"

var _LexingTokenType_index = [...]uint16{0, 11, 23, 38, 48, 59, 74, 91, 114, 134, 150, 169, 191, 206, 222, 244, 262, 285, 293}

func (i LexingTokenType) String() string {
	if i < 0 || i >= LexingTokenType(len(_LexingTokenType_index)-1) {
		return "LexingTokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LexingTokenType_name[_LexingTokenType_index[i]:_LexingTokenType_index[i+1]]
}
